package Boundary;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import Controller.DataConvertion;
import Controller.DaviesBouldinIndex;
import Controller.FuzzyAssociationRule;
import Controller.GenerateRandomValues;
import Controller.Kmeans;
import Controller.MatrixOperation;
import Controller.PrincipalComponentAnalysis;
import Controller.ReadDocuments;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.table.DefaultTableModel;

public class Form extends javax.swing.JFrame {
    
    private HashMap<String, double[]> resultDataConvertion;
    private int numberOfDocument;
    private int numberOfCluster;
    private double theta;
    private double alpha;
    private String methodSelected;
    
    public Form(){
        initComponents();
        
        TF_Path.setEditable(false);
        TF_JumlahDokumen.setEditable(false);
        TF_JumlahTerm.setEditable(false);
        RB_Kmeans.setEnabled(false);
        RB_KmeansFar.setEnabled(false);
        RB_KmeansPca.setEnabled(false);
        BTN_Mulai.setEnabled(false);
        TF_JumlahDokumen.setEnabled(false);
        TF_JumlahTerm.setEnabled(false);
        TF_JumlahKlaster.setEnabled(false);
//        TF_Alpha.setEnabled(false);
        TF_Theta.setEnabled(false);
        TF_Centroid.setEditable(false);
        TFJI.setEditable(false);
        TFND.setEditable(false);
        TFWK.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        methodClustering = new javax.swing.ButtonGroup();
        BTN_Path = new javax.swing.JButton();
        TF_Path = new javax.swing.JTextField();
        P_Komputasi = new javax.swing.JPanel();
        LWK = new javax.swing.JLabel();
        LND = new javax.swing.JLabel();
        LJI = new javax.swing.JLabel();
        TFND = new javax.swing.JTextField();
        TFWK = new javax.swing.JTextField();
        TFJI = new javax.swing.JTextField();
        P_ParameterKmeans = new javax.swing.JPanel();
        L_JumlahDokumen = new javax.swing.JLabel();
        TF_JumlahDokumen = new javax.swing.JTextField();
        L_JumlahTerm = new javax.swing.JLabel();
        TF_JumlahTerm = new javax.swing.JTextField();
        P_ParameterPso = new javax.swing.JPanel();
        L_ParameterPso = new javax.swing.JLabel();
        L_Theta = new javax.swing.JLabel();
        TF_Theta = new javax.swing.JTextField();
        BTN_Mulai = new javax.swing.JButton();
        P_Centroid = new javax.swing.JPanel();
        L_Centroid = new javax.swing.JLabel();
        TF_Centroid = new javax.swing.JTextField();
        P_HasilClustering = new javax.swing.JPanel();
        SP_HasilClustering = new javax.swing.JScrollPane();
        Thasil_clustering = new javax.swing.JTable();
        L_HasilClustering = new javax.swing.JLabel();
        P_Metode = new javax.swing.JPanel();
        RB_Kmeans = new javax.swing.JRadioButton();
        RB_KmeansPca = new javax.swing.JRadioButton();
        RB_KmeansFar = new javax.swing.JRadioButton();
        L_Metode1 = new javax.swing.JLabel();
        P_ParameterKmeans1 = new javax.swing.JPanel();
        L_ParameterKmeans1 = new javax.swing.JLabel();
        L_JumlahKlaster = new javax.swing.JLabel();
        TF_JumlahKlaster = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Clustering using (K-means, K-means+PCA, K-means+FAR)");
        setBackground(new java.awt.Color(236, 240, 241));
        setResizable(false);

        BTN_Path.setBackground(new java.awt.Color(231, 76, 60));
        BTN_Path.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BTN_Path.setForeground(new java.awt.Color(255, 255, 255));
        BTN_Path.setText("Buka Direktori");
        BTN_Path.setToolTipText("");
        BTN_Path.setBorderPainted(false);
        BTN_Path.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BTN_Path.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_PathActionPerformed(evt);
            }
        });

        P_Komputasi.setBackground(new java.awt.Color(0, 153, 153));
        P_Komputasi.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        LWK.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        LWK.setForeground(new java.awt.Color(255, 255, 255));
        LWK.setText("Waktu Komputasi");

        LND.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        LND.setForeground(new java.awt.Color(255, 255, 255));
        LND.setText("Nilai DBI");

        LJI.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        LJI.setForeground(new java.awt.Color(255, 255, 255));
        LJI.setText("Jumlah Iterasi");

        javax.swing.GroupLayout P_KomputasiLayout = new javax.swing.GroupLayout(P_Komputasi);
        P_Komputasi.setLayout(P_KomputasiLayout);
        P_KomputasiLayout.setHorizontalGroup(
            P_KomputasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_KomputasiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(P_KomputasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LJI)
                    .addComponent(LWK)
                    .addComponent(LND))
                .addGap(10, 10, 10)
                .addGroup(P_KomputasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TFND, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addComponent(TFWK)
                    .addComponent(TFJI))
                .addGap(18, 18, 18))
        );
        P_KomputasiLayout.setVerticalGroup(
            P_KomputasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_KomputasiLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(P_KomputasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LWK)
                    .addComponent(TFWK, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(P_KomputasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TFJI, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LJI))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(P_KomputasiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LND)
                    .addComponent(TFND, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        P_ParameterKmeans.setBackground(new java.awt.Color(0, 153, 153));
        P_ParameterKmeans.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        L_JumlahDokumen.setText("Jumlah Dokumen");

        L_JumlahTerm.setText("Jumlah Term");

        javax.swing.GroupLayout P_ParameterKmeansLayout = new javax.swing.GroupLayout(P_ParameterKmeans);
        P_ParameterKmeans.setLayout(P_ParameterKmeansLayout);
        P_ParameterKmeansLayout.setHorizontalGroup(
            P_ParameterKmeansLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_ParameterKmeansLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(P_ParameterKmeansLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(P_ParameterKmeansLayout.createSequentialGroup()
                        .addComponent(L_JumlahDokumen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TF_JumlahDokumen, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(P_ParameterKmeansLayout.createSequentialGroup()
                        .addComponent(L_JumlahTerm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(TF_JumlahTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        P_ParameterKmeansLayout.setVerticalGroup(
            P_ParameterKmeansLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_ParameterKmeansLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(P_ParameterKmeansLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L_JumlahDokumen)
                    .addComponent(TF_JumlahDokumen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(P_ParameterKmeansLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L_JumlahTerm)
                    .addComponent(TF_JumlahTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        P_ParameterPso.setBackground(new java.awt.Color(0, 153, 153));
        P_ParameterPso.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        L_ParameterPso.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        L_ParameterPso.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        L_ParameterPso.setText("Parameter Metode FAR");

        L_Theta.setText("Theta");

        javax.swing.GroupLayout P_ParameterPsoLayout = new javax.swing.GroupLayout(P_ParameterPso);
        P_ParameterPso.setLayout(P_ParameterPsoLayout);
        P_ParameterPsoLayout.setHorizontalGroup(
            P_ParameterPsoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_ParameterPsoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(L_Theta, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TF_Theta, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
            .addComponent(L_ParameterPso, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        P_ParameterPsoLayout.setVerticalGroup(
            P_ParameterPsoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_ParameterPsoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(L_ParameterPso)
                .addGap(26, 26, 26)
                .addGroup(P_ParameterPsoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L_Theta)
                    .addComponent(TF_Theta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(133, Short.MAX_VALUE))
        );

        BTN_Mulai.setBackground(new java.awt.Color(231, 76, 60));
        BTN_Mulai.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BTN_Mulai.setForeground(new java.awt.Color(255, 255, 255));
        BTN_Mulai.setText("Mulai");
        BTN_Mulai.setToolTipText("");
        BTN_Mulai.setBorderPainted(false);
        BTN_Mulai.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BTN_Mulai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_MulaiActionPerformed(evt);
            }
        });

        P_Centroid.setBackground(new java.awt.Color(0, 153, 153));
        P_Centroid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        L_Centroid.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        L_Centroid.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        L_Centroid.setText("Pusat Klaster Akhir");

        javax.swing.GroupLayout P_CentroidLayout = new javax.swing.GroupLayout(P_Centroid);
        P_Centroid.setLayout(P_CentroidLayout);
        P_CentroidLayout.setHorizontalGroup(
            P_CentroidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_CentroidLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TF_Centroid)
                .addContainerGap())
            .addComponent(L_Centroid, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        P_CentroidLayout.setVerticalGroup(
            P_CentroidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_CentroidLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(L_Centroid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TF_Centroid, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                .addContainerGap())
        );

        P_HasilClustering.setBackground(new java.awt.Color(0, 153, 153));
        P_HasilClustering.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Thasil_clustering.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        SP_HasilClustering.setViewportView(Thasil_clustering);

        L_HasilClustering.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        L_HasilClustering.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        L_HasilClustering.setText("HASIL");

        javax.swing.GroupLayout P_HasilClusteringLayout = new javax.swing.GroupLayout(P_HasilClustering);
        P_HasilClustering.setLayout(P_HasilClusteringLayout);
        P_HasilClusteringLayout.setHorizontalGroup(
            P_HasilClusteringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_HasilClusteringLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SP_HasilClustering)
                .addContainerGap())
            .addComponent(L_HasilClustering, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        P_HasilClusteringLayout.setVerticalGroup(
            P_HasilClusteringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, P_HasilClusteringLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(L_HasilClustering)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SP_HasilClustering, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addContainerGap())
        );

        P_Metode.setBackground(new java.awt.Color(0, 153, 153));
        P_Metode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        RB_Kmeans.setBackground(new java.awt.Color(0, 153, 153));
        methodClustering.add(RB_Kmeans);
        RB_Kmeans.setText("K-Means");
        RB_Kmeans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_KmeansActionPerformed(evt);
            }
        });

        RB_KmeansPca.setBackground(new java.awt.Color(0, 153, 153));
        methodClustering.add(RB_KmeansPca);
        RB_KmeansPca.setText("K-Means + PCA");
        RB_KmeansPca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_KmeansPcaActionPerformed(evt);
            }
        });

        RB_KmeansFar.setBackground(new java.awt.Color(0, 153, 153));
        methodClustering.add(RB_KmeansFar);
        RB_KmeansFar.setText("K-Means + FAR");
        RB_KmeansFar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB_KmeansFarActionPerformed(evt);
            }
        });

        L_Metode1.setBackground(new java.awt.Color(0, 153, 153));
        L_Metode1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        L_Metode1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        L_Metode1.setText("Metode Pengelompokkan");

        javax.swing.GroupLayout P_MetodeLayout = new javax.swing.GroupLayout(P_Metode);
        P_Metode.setLayout(P_MetodeLayout);
        P_MetodeLayout.setHorizontalGroup(
            P_MetodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_MetodeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(P_MetodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RB_Kmeans)
                    .addComponent(RB_KmeansPca)
                    .addComponent(RB_KmeansFar))
                .addContainerGap(85, Short.MAX_VALUE))
            .addComponent(L_Metode1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        P_MetodeLayout.setVerticalGroup(
            P_MetodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, P_MetodeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(L_Metode1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RB_Kmeans)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RB_KmeansPca)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RB_KmeansFar)
                .addGap(54, 54, 54))
        );

        P_ParameterKmeans1.setBackground(new java.awt.Color(0, 153, 153));
        P_ParameterKmeans1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        L_ParameterKmeans1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        L_ParameterKmeans1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        L_ParameterKmeans1.setText("Parameter Algoritma K-Means");

        L_JumlahKlaster.setText("Jumlah Klaster (k)");

        TF_JumlahKlaster.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TF_JumlahKlasterKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout P_ParameterKmeans1Layout = new javax.swing.GroupLayout(P_ParameterKmeans1);
        P_ParameterKmeans1.setLayout(P_ParameterKmeans1Layout);
        P_ParameterKmeans1Layout.setHorizontalGroup(
            P_ParameterKmeans1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_ParameterKmeans1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(L_JumlahKlaster)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(TF_JumlahKlaster, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(L_ParameterKmeans1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        P_ParameterKmeans1Layout.setVerticalGroup(
            P_ParameterKmeans1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(P_ParameterKmeans1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(L_ParameterKmeans1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(P_ParameterKmeans1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L_JumlahKlaster)
                    .addComponent(TF_JumlahKlaster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TF_Path)
                        .addGap(18, 18, 18)
                        .addComponent(BTN_Path))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(P_ParameterKmeans, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(P_Metode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(P_ParameterKmeans1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(P_ParameterPso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BTN_Mulai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(P_Centroid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(P_HasilClustering, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(P_Komputasi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TF_Path, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BTN_Path))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(P_ParameterKmeans, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(P_Metode, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(P_ParameterKmeans1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(P_ParameterPso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTN_Mulai))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(P_Centroid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(P_Komputasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(P_HasilClustering, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTN_PathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_PathActionPerformed
        JFileChooser oJC = new JFileChooser();
        oJC.setCurrentDirectory(new java.io.File("."));
        oJC.setDialogTitle("Select Folder");
        oJC.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        oJC.setAcceptAllFileFilterUsed(false);
        int tempShowOpenDialog = oJC.showOpenDialog(null);
        int tempAPPROVE_OPTION = JFileChooser.APPROVE_OPTION;
        
        if(tempShowOpenDialog == tempAPPROVE_OPTION){
            String path = String.valueOf(oJC.getSelectedFile());
            
            try {
                ReadDocuments oRD = new ReadDocuments();
                
                //1. read data from external source
                oRD.doReadDocuments(path);
                HashMap<String, String> rRD = oRD.getResultReadDocuments();
                
                //set text field (path)
                TF_Path.setText(path);
                
                //2. data convertion from text to numeric
                DataConvertion oDC = new DataConvertion();
                
                this.resultDataConvertion = oDC.doDataConvertion(rRD);
                this.numberOfDocument = oDC.numberOfDocument;
                
                //set text field (jumlah dokumen)
                TF_JumlahDokumen.setText(String.valueOf(oDC.numberOfDocument));
                //set text field (jumlah term)
                TF_JumlahTerm.setText(String.valueOf(oDC.numberOfTerm));
                
                RB_Kmeans.setEnabled(true);
                RB_KmeansFar.setEnabled(true);
                RB_KmeansPca.setEnabled(true);
                TF_JumlahDokumen.setEnabled(true);
                TF_JumlahTerm.setEnabled(true);
                TF_JumlahKlaster.setEnabled(true);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex, "ERROR RUNTIME", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_BTN_PathActionPerformed

    private void BTN_MulaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_MulaiActionPerformed
        boolean numberOfCluster_isEmpty = TF_JumlahKlaster.getText().isEmpty();
        Integer getNumberOfCluster = Integer.valueOf(TF_JumlahKlaster.getText());
        if (numberOfCluster_isEmpty == true) {
            JOptionPane.showMessageDialog(null, "jumlah klaster harus diisi", "peringatan", JOptionPane.WARNING_MESSAGE);
        }
        else if (getNumberOfCluster < 2 || getNumberOfCluster > this.numberOfDocument) {
            JOptionPane.showMessageDialog(null, "jumlah klaster harus >= 2 dan <= "+this.numberOfDocument, "peringatan", JOptionPane.WARNING_MESSAGE);
        }
        else{
            this.numberOfCluster = Integer.valueOf(TF_JumlahKlaster.getText());
            boolean isSelect_RB_Kmeans = RB_Kmeans.isSelected();
            boolean isSelect_RB_KmeansPca = RB_KmeansPca.isSelected();
            boolean isSelect_RB_KmeansFar = RB_KmeansFar.isSelected();
            
            if (isSelect_RB_Kmeans == false && isSelect_RB_KmeansPca == false && isSelect_RB_KmeansFar == false) {
                JOptionPane.showMessageDialog(null, "metode pengelompokkan harus dipilih", "peringatan", JOptionPane.WARNING_MESSAGE);
            }
            
            MatrixOperation oMO = new MatrixOperation();
            GenerateRandomValues oGRV = new GenerateRandomValues();
            PrincipalComponentAnalysis oPCA = new PrincipalComponentAnalysis();
            FuzzyAssociationRule oFAR = new FuzzyAssociationRule();
            Kmeans oKM = new Kmeans();
            DaviesBouldinIndex oDBI = new DaviesBouldinIndex();
            
            if (isSelect_RB_Kmeans == true) {
                HashMap<String, double[]> data = (HashMap<String, double[]>) this.resultDataConvertion.clone();
                
                //generate centroids using random values
                List<double[]> dataValues = data.values().stream().collect(Collectors.toList());
                double[][] earlyCentroids = oGRV.doGenerateRandomValues(this.numberOfCluster, dataValues.get(0).length, oMO.getMinValueInMatrix2DForList(dataValues), oMO.getMaxValueInMatrix2DForList(dataValues));
                
                //clustering using k-means algorithm
                double startTime = System.nanoTime();// start computation time
                HashMap<Integer, String[]> rKM = oKM.doKmeans(earlyCentroids, data, this.numberOfCluster);
                double stopTime = System.nanoTime();// stop computation time

                //calc computation time k-means algorithm
                double computationTime = this.calcTimeComputation(startTime, stopTime);

                //evaluating result clustering using DBI
                double rDBI = oDBI.doDaviesBouldinIndex(oKM.finalCentroids, this.resultDataConvertion);

                int finalNumberOfIteration = oKM.finalNumberOfIteration;
                
                DefaultTableModel dataVisualization = this.dataVisualization(rKM);
                //data visualization
                TFWK.setText(String.valueOf(String.format("%.10f", computationTime)));
                TFJI.setText(String.valueOf(finalNumberOfIteration));
                TFND.setText(String.valueOf(String.format("%.10f", rDBI)));
                Thasil_clustering.setModel(dataVisualization);
                
                System.out.println("\n");
                System.out.println("--------------------------------- END K-MEANS ---------------------------------");
            }
            else if (isSelect_RB_KmeansPca == true) {
                //dimentionality reduction using principal component analysis
                HashMap<String, double[]> data = oPCA.doPrincipalComponentAnalysis(this.resultDataConvertion);
                
                //generate centroids using random values
                List<double[]> dataValues = data.values().stream().collect(Collectors.toList());
                double[][] earlyCentroids = oGRV.doGenerateRandomValues(this.numberOfCluster, dataValues.get(0).length, oMO.getMinValueInMatrix2DForList(dataValues), oMO.getMaxValueInMatrix2DForList(dataValues));
                
                //clustering using k-means algorithm
                double startTime = System.nanoTime();// start computation time
                HashMap<Integer, String[]> rKM = oKM.doKmeans(earlyCentroids, data, this.numberOfCluster);
                double stopTime = System.nanoTime();// stop computation time

                //calc computation time k-means algorithm
                double computationTime = this.calcTimeComputation(startTime, stopTime);

                //evaluating result clustering using DBI
                double rDBI = oDBI.doDaviesBouldinIndex(oKM.finalCentroids, this.resultDataConvertion);
                
                int finalNumberOfIteration = oKM.finalNumberOfIteration;
                
                DefaultTableModel dataVisualization = this.dataVisualization(rKM);

                //data visualization
                TFWK.setText(String.valueOf(String.format("%.10f", computationTime)));
                TFJI.setText(String.valueOf(finalNumberOfIteration));
                TFND.setText(String.valueOf(String.format("%.10f", rDBI)));
                Thasil_clustering.setModel(dataVisualization);
                
                System.out.println("\n");
                System.out.println("--------------------------------- END K-MEANS+PCA ---------------------------------");
            }
            else if (isSelect_RB_KmeansFar == true) {
                boolean theta_isEmpty = TF_Theta.getText().isEmpty();
//                boolean alpha_isEmpty = TF_Alpha.getText().isEmpty();
                
                if (theta_isEmpty == true) {
                    JOptionPane.showMessageDialog(null, "parameter FAR harus diisi semua", "peringatan", JOptionPane.WARNING_MESSAGE);
                } else{
                    try {
                        this.theta = Double.valueOf(TF_Theta.getText());
//                        this.alpha = Double.valueOf(TF_Alpha.getText());
                        
                        //dimentionality reduction using fuzzy association rule
                        HashMap<String, double[]> data = oFAR.doFuzzyAssociationRule(this.resultDataConvertion, this.alpha, this.theta);
                        
                        //generate centroids using random values
                        List<double[]> dataValues = data.values().stream().collect(Collectors.toList());
                        double[][] earlyCentroids = oGRV.doGenerateRandomValues(this.numberOfCluster, dataValues.get(0).length, oMO.getMinValueInMatrix2DForList(dataValues), oMO.getMaxValueInMatrix2DForList(dataValues));
                        
                        //clustering using k-means algorithm
                        double startTime = System.nanoTime();// start computation time
                        HashMap<Integer, String[]> rKM = oKM.doKmeans(earlyCentroids, data, this.numberOfCluster);
                        double stopTime = System.nanoTime();// stop computation time
                        
                        //calc computation time k-means algorithm
                        double computationTime = this.calcTimeComputation(startTime, stopTime);
                        
                        //evaluating result clustering using DBI
                        double rDBI = oDBI.doDaviesBouldinIndex(oKM.finalCentroids, this.resultDataConvertion);
                        
                        int finalNumberOfIteration = oKM.finalNumberOfIteration;
                        
                        DefaultTableModel dataVisualization = this.dataVisualization(rKM);
                        
                        //data visualization
                        TFWK.setText(String.valueOf(String.format("%.10f", computationTime)));
                        TFJI.setText(String.valueOf(finalNumberOfIteration));
                        TFND.setText(String.valueOf(String.format("%.10f", rDBI)));
                        Thasil_clustering.setModel(dataVisualization);
                        
                        System.out.println("\n");
                        System.out.println("--------------------------------- END K-MEANS+FAR ---------------------------------");
                    } catch (SQLException ex) {
                        Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_BTN_MulaiActionPerformed

    private void TF_JumlahKlasterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TF_JumlahKlasterKeyTyped
        char enter = evt.getKeyChar();
        if(!(Character.isDigit(enter))) {
            evt.consume();
        }
    }//GEN-LAST:event_TF_JumlahKlasterKeyTyped

    private void RB_KmeansFarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_KmeansFarActionPerformed
//        TF_Alpha.setEnabled(true);
        TF_Theta.setEnabled(true);
        BTN_Mulai.setEnabled(true);
    }//GEN-LAST:event_RB_KmeansFarActionPerformed

    private void RB_KmeansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_KmeansActionPerformed
//        TF_Alpha.setEnabled(false);
        TF_Theta.setEnabled(false);
        BTN_Mulai.setEnabled(true);
    }//GEN-LAST:event_RB_KmeansActionPerformed

    private void RB_KmeansPcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB_KmeansPcaActionPerformed
//        TF_Alpha.setEnabled(false);
        TF_Theta.setEnabled(false);
        BTN_Mulai.setEnabled(true);
    }//GEN-LAST:event_RB_KmeansPcaActionPerformed
    
    private double calcTimeComputation(double start, double finish) {
        return (finish - start) / 1000000000;
    }
    
    private DefaultTableModel dataVisualization(HashMap<Integer, String[]> tempKM) {
        //calc number of member of each cluster
        int[] numberOfMemberInEachCluster = new int[this.numberOfCluster];
        for (int i = 0; i < this.numberOfCluster; i++) {
            int numberOfMemberInOneCluster = 0;
            for (int j = 0; j < this.numberOfDocument; j++) {
                if (Integer.parseInt(tempKM.get(j)[1]) == i) {
                    numberOfMemberInOneCluster++;
                }
            }
            numberOfMemberInEachCluster[i] = numberOfMemberInOneCluster;
        }
        
        //search max number of member in all cluster
        int maxNumberOfMemberInAllCluster = Arrays.stream(numberOfMemberInEachCluster).summaryStatistics().getMax();

        DefaultTableModel dataForVisualization = new DefaultTableModel(maxNumberOfMemberInAllCluster, this.numberOfCluster);
        for (int i = 0; i < this.numberOfCluster; i++) {
            int row = 0;
            for (int j = 0; j < this.numberOfDocument; j++) {
                if (Integer.parseInt(tempKM.get(j)[1]) == i) {
                    dataForVisualization.setValueAt((Object)tempKM.get(j)[0], row, i);
                    row++;
                }
            }
        }
        return dataForVisualization;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Form().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTN_Mulai;
    private javax.swing.JButton BTN_Path;
    private javax.swing.JLabel LJI;
    private javax.swing.JLabel LND;
    private javax.swing.JLabel LWK;
    private javax.swing.JLabel L_Centroid;
    private javax.swing.JLabel L_HasilClustering;
    private javax.swing.JLabel L_JumlahDokumen;
    private javax.swing.JLabel L_JumlahKlaster;
    private javax.swing.JLabel L_JumlahTerm;
    private javax.swing.JLabel L_Metode1;
    private javax.swing.JLabel L_ParameterKmeans1;
    private javax.swing.JLabel L_ParameterPso;
    private javax.swing.JLabel L_Theta;
    private javax.swing.JPanel P_Centroid;
    private javax.swing.JPanel P_HasilClustering;
    private javax.swing.JPanel P_Komputasi;
    private javax.swing.JPanel P_Metode;
    private javax.swing.JPanel P_ParameterKmeans;
    private javax.swing.JPanel P_ParameterKmeans1;
    private javax.swing.JPanel P_ParameterPso;
    private javax.swing.JRadioButton RB_Kmeans;
    private javax.swing.JRadioButton RB_KmeansFar;
    private javax.swing.JRadioButton RB_KmeansPca;
    private javax.swing.JScrollPane SP_HasilClustering;
    private javax.swing.JTextField TFJI;
    private javax.swing.JTextField TFND;
    private javax.swing.JTextField TFWK;
    private javax.swing.JTextField TF_Centroid;
    private javax.swing.JTextField TF_JumlahDokumen;
    private javax.swing.JTextField TF_JumlahKlaster;
    private javax.swing.JTextField TF_JumlahTerm;
    private javax.swing.JTextField TF_Path;
    private javax.swing.JTextField TF_Theta;
    private javax.swing.JTable Thasil_clustering;
    private javax.swing.ButtonGroup methodClustering;
    // End of variables declaration//GEN-END:variables
}